<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_panobi_idle_left</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
dir = 1;
grav = 1;
spd = 12;
jspd = 14;
hspd = 0
vspd = 0;
airjump = 2;
ammo = 5;
life = 20;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dashing returns to normal speed

obj_player_1.hspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform Physics
//Controls for Keyboard and Gamepad
var rkey = keyboard_check(vk_right) || 
           gamepad_button_check(0, gp_padr) 
           //||
           //gamepad_button_check(0, gp_axislh)
           ;
           
var lkey = keyboard_check(vk_left) || 
           gamepad_button_check(0, gp_padl);
var jkey = keyboard_check_pressed(vk_space) || 
           gamepad_button_check_pressed(0, gp_face1);
var dkey = keyboard_check(vk_shift) ||
           gamepad_button_check(0, gp_face3);
var dash_key = keyboard_check(vk_alt) ||
               gamepad_button_check(0, gp_face2);
var dash_key_release = keyboard_check_released(vk_alt) ||
                       gamepad_button_check_released(0, gp_face2);                          

//Check for platform
if (place_meeting(x, y+1, obj_platform)) {
    airjump = 2;
    vspd = 0;
    
    //Jumping
    if(jkey) {
        vspd =  -jspd;
        //audio_play_sound(snd_jump, 10, false);
    }
} else {
    // Gravity
    if (vspd &lt; 10) {
        vspd += grav;  
    }
    
    //check for airjump
    //if (airjump &gt; 0) {
    //    if (jkey) {
    //        vspd = -jspd;
    //        airjump -= 1;
    //        //audio_play_sound(snd_jump, 10, false);
    //    }
    //}
}


// Moving right
if (rkey) {
    hspd = spd;
    sprite_index = spr_panobi_running_right;
    image_speed = 0.25;
    
    //Left wall jump
    if (place_meeting(x-1, y, obj_platform) &amp;&amp; !place_meeting(x, y+1, obj_platform) &amp;&amp; !lkey)
        vspd = -jspd;
        //sprite_index = spr_panobi_idle_right         
          
}

    
// Moving left
if (lkey) {
    hspd = -spd;
    sprite_index = spr_panobi_running_left;
    image_speed = 0.25;

       // Right wall jump 
    if (place_meeting(x+1, y, obj_platform) &amp;&amp; !place_meeting(x, y+1, obj_platform) &amp;&amp; !rkey)
        vspd = -jspd;
        //sprite_index = spr_panobi_idle_left 
                
}

//DASHING BUTTON (BETA)
// MMX Dashing Right
if (dash_key &amp;&amp; dir == 1){
    spd = 18;
    hspd = spd;
    //sprite_index = spr_sprite_dashing_right
    alarm[0] = room_speed * 0.5;
} 

// MMX Dashing Left
if (dash_key &amp;&amp; dir == -1){
    spd = 18;
    hspd = -spd;
    //sprite_index = spr_sprite_dashing_left
    alarm[0] = room_speed * 0.5;
}

// Cancel Dash
if (dash_key_release){
    spd = 12;
    hspd = 0;
} 
                        
// Check for not moving
if ((!rkey &amp;&amp; !lkey &amp;&amp; !dash_key) || (rkey &amp;&amp; lkey)) {
    hspd = 0;
    
    if(dir == 1){
    sprite_index = spr_panobi_idle_right
    image_speed = 0.05
    } else {
    sprite_index = spr_panobi_idle_left
    image_speed = 0.05
    }
} 

// Horizontal collisions
if (place_meeting(x+hspd, y , obj_platform)) {
    while (!place_meeting(x+sign(hspd), y, obj_platform)) {
        x+= sign(hspd);
    }
    hspd = 0;
}

// Move Horizontally
x += hspd;

// Vertical collisions
if (place_meeting(x, y+vspd , obj_platform)) {
    while (!place_meeting(x, y+sign(vspd), obj_platform)) {
        y+= sign(vspd);
    }
    vspd = 0;
}

// Move Vertically
y += vspd;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shooting Mechanics

var skey = keyboard_check_pressed(vk_control) ||
           gamepad_button_check_pressed(0, gp_face3);

           
//Shooting
// Change bullet direction based on dir value
if (rkey){
    dir = 1
}
if (lkey) {
    dir = -1
}

if (obj_player_1.ammo &gt; 0){
    if (skey &amp;&amp; dir == 1) {
        instance_create(x+16, y, obj_bullet_player_1);
        obj_player_1.ammo -= 1  
        dir = 1  
    }
    if (skey &amp;&amp; dir == -1) {
        instance_create(x-16, y, obj_bullet_player_1);
        obj_player_1.ammo -= 1
        dir = -1     
    }
}










</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sword Mechanics 

var sword_key = keyboard_check_pressed(vk_shift) ||
                gamepad_button_check_pressed(0, gp_face4);
                
if (rkey){
    dir = 1
}
if (lkey) {
    dir = -1
}


if (sword_key &amp;&amp; dir == 1) {
    sprite_index = spr_sword_attack_right;
    image_speed = 0.2;
    if(place_meeting(x, y, obj_player_2)){
        obj_player_2.life -= 2;
    }
}

if (sword_key &amp;&amp; dir == -1) {
    sprite_index = spr_sword_attack_left
    image_speed = 0.2;
    if(place_meeting(x, y, obj_player_2)){
        obj_player_2.life -= 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DASHING BUTTON (BETA)
// MMX Dashing Right
if (dash_key &amp;&amp; dir == 1){
    spd = 18;
    hspd = spd;
    //sprite_index = spr_sprite_dashing_right
} 
    alarm[0] = room_speed * 0.5;
 
// MMX Dashing Left
if (dash_key &amp;&amp; dir == -1){
    spd = 18;
    hspd = -spd;
    //sprite_index = spr_sprite_dashing_left
}

    alarm[0] = room_speed * 0.5;

// Cancel Dash
if (dash_key_release){
    spd = 12;
    hspd = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death Conditions

if (life == 0){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sound Effects

if jkey {
    sound_play(snd_jump);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
